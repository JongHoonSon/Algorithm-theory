// 1. 시간복잡도 : 이분 탐색은 한 번 탐색을 수행할 때 마다 탐색 범위가 1/2로 줄기 때문에
// N개의 원소를 이분 탐색하는데 드는 시간은 O(log N) 이다.

// 2. 이분 탐색은 값을 직접 찾는 경우와 범위를 좁혀가며 값을 찾는 경우로 나눌 수 있다.

// 3. 값을 직접 찾는 경우, mid값이 찾는 값과 같으면 바로 리턴하고,
// 찾는 값과 다르다면 탐색 범위를 좁히기 위해 left를 mid+1 또는 right를 mid-1로 설정하고, mid를 재계산 한다.
// 이를 값을 찾을 때까지 이를 반복한다.

// 4. 범위를 좁혀가며 값을 찾는 경우
// 탐색 범위를 좁히기 위해 left를 mid+1 또는 right를 mid-1로 설정하고, mid를 재계산 한다.
// 문제의 요구에 따라 가장 worst case를 found 변수 저장하고(보통 left 또는 right 값 중 하나),
// 탐색이 성공할 때마다 found 변수의 값을 더 좋은 case로 변경하면 된다.
// 위 과정을 left가 right보다 커질 때까지 반복하고 ( while(left <= right) ),
// 반복문이 종료되면, found가 최종적으로 찾는 문제의 해가 된다.
