// 선택 정렬 : 처리되지 않은 데이터를 하나씩 골라 적절한 위치에 삽입하는 정렬 방법

// 탐색 과정

// 7 5 9 0 3 1 6 2 4 8  => 0번 index에 들어있는 7이 정렬되어있다고 가정함
// 5 7 9 0 3 1 6 2 4 8  => 1번 index에 들어있는 5를 0번 index의 값과 비교하여 적절한 위치에 넣음
// 5 7 9 0 3 1 6 2 4 8  => 2번 index에 들어있는 9를 0~1번 index의 값과 비교하여 적절한 위치에 넣음
// 0 5 7 9 3 1 6 2 4 8  => 3번 index에 들어있는 0를 0~2번 index의 값과 비교하여 적절한 위치에 넣음
// ...
//
// 0 1 2 3 4 5 6 7 9 8  => 8번 index에 들어있는 4를 0~7번 index의 값과 비교하여 적절한 위치에 넣음
// 0 1 2 3 4 5 6 7 8 9  => 9번 index에 들어있는 8를 0~8번 index의 값과 비교하여 적절한 위치에 넣음

// 시간복잡도 : N + (N-1) + (N-2) + ... + 2  => O(N^2)

// 구현 방식

let array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8];

// 이중 반복문을 이용
// 0번 index의 값은 고정시키고,
// 1번 index부터 배열의 마지막 index까지 삽입 정렬을 수행
for (let i = 1; i < array.length; i++) {
  // i번 index부터 시작해서 0번 index까지 1씩 감소하며 반복
  for (let j = i; j > 0; j--) {
    // i번 index인 j를 j-1과 비교하여 j가 더 작으면 j와 j-1을 교환함
    if (array[j - 1] > array[j]) {
      let temp = array[j - 1];
      array[j - 1] = array[j];
      array[j] = temp;

      // j-1이 더 작은 수일 경우, 더 이상 교환않고 종료함
    } else {
      break;
    }
  }
}

console.log("array : ", array);
