// DFS는 visited로 방문한 곳을 true 처리하면서 들어갈 수 있는데까지 들어가보고,
// 나오면서 기존에 방문한 곳을 false 처리하면서 나온다.
// 이는 DFS가 탐색하는 동안 직진과 후진을 적절히 섞어 쓴다는 것을 의미한다.

// 예를 들어 DFS는 '1 -> 2 -> 3' 순서로 들어갔다가 3에서 더 이상 진입이 불가능할 경우
// '2 <- 3'로 나오면서, visited[3] 을 false 처리하기 때문에
// 추후에 '1 -> 4 -> 3' 같이 기존에 방문한 이력이 있었던 3을 포함한 새로운 경로에 대한 탐색 가능 여부를 판단할 때,
// visited[3] 값이 false 이므로 해당 경로로 추가적인 탐색을 수행할 수 있다.
// 즉, DFS는 후진을 할 수 있기 때문에, 3을 한 번 방문하였다가 다시 방문하지 않은 것으로 처리할 수 있다.

// 반면에 BFS는 willVisit으로 방문할 예정인 곳을 true처리하면서 탐색하지만,
// DFS처럼 이후 다시 되돌아 나오지 않는다.
// 이는 BFS가 탐색하는 동안 오직 직진만 사용한다는 것을 의미한다.

// 예를 들어 '1 -> 2 -> 3' 인 경로가 있었고,
// '1 -> 4 -> 2' 라는 경로가 있었다면,
// '1 -> 4 -> 2' 에서 2를 방문하려고 할 때, 이미 2는 '1 -> 2 -> 3'에 의해 방문되었으므로,
// '1 -> 4 -> 2' 의 경로를 사용할 수 없다.
// 이러한 특성으로 인해 BFS가 최단 거리를 구하는 문제에서 사용된다.
